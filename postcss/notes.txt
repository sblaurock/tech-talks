1. What is a CSS preprocessor?
  - Native CSS lacks functionality, so we aim to extend it
  - All in all allows you to write more modular, functional, maintainable styles
  - Browser cannot understand this code natively (*), must be compiled into readable code
  - CSS4 has variables natively, but none of the other things that make preprocessors popular
  - We can do simple math via CSS calc function, but this doesn't quite compare to what we get with pre-processing

2. What is PostCSS and how is it different?
  - PostCSS includes only the tools you need to have a CSS preprocessor, but none of the actual modifiers
  - Completely driven by plugins. Works just like Sass or Less, except the feature set is entirely driven by the plugins you add to your project
  - “PostCSS itself is very small. It includes only a CSS parser, a CSS node tree API, a source map generator, and a node tree stringifier.”
  - PostCSS is written in JavaScript, resulting in it being faster than libsass (C++). Better news, you can write your plugins in JavaScript

3. Comparison
  - Both
    - Integration with build tools (Gulp, Grunt)
    - Allow usage of latest functional patterns to CSS
    - Source map support
  - Sass, Less, SCSS
    - Consistent feature set, predictable usage
    - Maturity, adoption
      - Developers have it in their toolbelt
  - PostCSS
    - More easily extensible, greater freedom
      - Could lead to difficulty debugging and maintaining since feature sets across stacks will differ
    - Plugins written in JS instead of libsass (C++)
      - Easier to extend
    - Faster
      - Speed may not be a drastically important factor - most preprocessors are quite fast in most situations

4. Integration / Build Process
  - PostCSS will integrate with essentially any modern build tool
  - [DEMO] Integration with example Gulp workflow
    - Node environment set up with NPM and Gulp
    - Bootstrap example page with two CSS files, one for the Bootstrap library and one for custom styles
      - `npm install gulp gulp-rename gulp-watch` to install Gulp and dependencies
      - `npm install gulp-postcss` to install PostCSS
      - `npm install postcss-simple-vars` to install our first plugin that allows us to use Sass-like variables

5. But what if...
  - Using React? There's a plugin to evaluate CSS in JS
  - You can apply PostCSS to inline and in-page style definitions
  - Run PostCSS via the command line

5. Achieving Sass Feature Set
  - Yes, we can mostly achieve the full Sass featureset within PostCSS
    - If we search for all the features Sass offers, there are PostCSS plugin solutions for each one that will get us close
  - PreCSS is a bundle of plugins that does a much better job of providing all the same functionality that Sass offers
  - [DEMO] Integration of PreCSS into Gulp workflow
    - `npm install precss` to install PreCSS

6a. PostCSS Plugins (gracefully degrading)
  - What do you get that Sass won't provide
  - autoprefixer: Automatically add vendor prefixes from Can I Use
    - `npm install autoprefixer`
    - You can specify a list of browsers or selections (last 2 versions, > 5%)
  - oldie: IE fallbacks
    - `npm install oldie`
  - [DEMO] Integration of tools into Gulp workflow

6b. PostCSS Plugins (looking forward)
  - Transforms new CSS specs into more compatible CSS so you don't need to wait for browser support.
  - Write future-proof CSS now
  - Feature set
  - Autoprefixer fallbacks
  - [DEMO] Integration of cssnext into Gulp workflow
    - `npm install cssnext`

6c. PostCSS Plugins (tooling)
  - cssnano: Minify CSS
    - `npm install cssnano`
  - stylelint: Modern CSS linting
    - `npm install stylelint`
  - [DEMO] postcss-colorblind: Simulate colorblindness
    - Help understand accessibility issues on sites
    - `npm install postcss-colorblind`
  - There are amazing tools to help you analyze and generate reports
  - Fun plugins
    - Australian CSS syntax
    - Imperial length measurements

7. Writing a Plugin
  - PostCSS plugins are written in JavaScript
  - PostCSS's one job is to parse styles and return them to you in an organized format
  - Provides an API to query styles, allowing you to take action on them
    - Create a declaration, modify rule within declaration, delete all rules etc.
  - Guidelines
    - Plugins purpose should be clear from its name
    - Do one thing, and do it well. Plugins like cssnext and precss are actually built of smaller plugins
    - Write documentation and test

8. So... should I use it?
  - Kitchen sink. Talked about how extensible PostCSS is and how much can be added in, but it is a two way street.
  - Maybe you just need a CSS shim for conical gradients in your project and nothing more.
  - DavidTheClark quote
    - He has authored PostCSS plugins
  - Far and wide the most customizable and open solution
  - CodePen announced support
    - http://puu.sh/l9204/f3ec58fb94.png

Resources
  - http://sass-lang.com/guide
  - https://github.com/postcss/postcss
  - https://github.com/postcss/benchmark
  - https://github.com/postcss/postcss-js
  - http://davidtheclark.com/excited-about-postcss/
  - http://benfrain.com/breaking-up-with-sass-postcss/
  - http://postcss.parts/
  - http://studiorgb.uk/from-sass-to-postcss/
  - http://www.sitepoint.com/build-css-preprocessor-postcss/
  - https://blog.codepen.io/2015/07/14/postcss-now-supported-on-codepen/
